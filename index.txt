
MPLW - Matplotlib  AsciiDoc filter
==================================

include::summary.txt[]


Introduction
------------

Let say we need 'sin(x)' chart like this:
include::example-sin.txt[]

For this we include following MPL code snippet:
---------------------------------------
include::example-sin.txt[]
---------------------------------------
Asciidoc will send inline python code between "----" lines to stdin of mplw.py,
and generate HTML file with <img ...> tag for MPLW produced PNG file. 

["graphviz", "flow.png"]
---------------------------------------------------------------------
digraph G {
	rankdir=LR;
	node [shape=plaintext];
	{  node [shape=box];   AsciiDoc;   MPLW; }
	{  rank=same;          "PNG file";  "HTML file"; }

	"source TXT file"  ->  AsciiDoc                                        ->  "HTML file";
	                       AsciiDoc   ->  "MPL script snippet"  ->  MPLW   ->  "PNG file";
}                                                                                         
--------------------------------------------------------------------


Now let say we have some data from two experiments and we need a chart like this:
include::example-data.txt[]
It can be made with this:
---------------------------------------
include::example-data.txt[]
---------------------------------------

Text after +"____"+ is plot data in table form.  The c[][] is matrix where c[0] is vector
holding 1st col from above table, c[1] is second column and so on.

See also http://matplotlib.sourceforge.net/gallery.html[matplotlib gallery].


Install
-------
Replace `emerge` with your distro package manager:

---------------------------------------------
emerge -u matplotlib asciidoc git 	# python and  numpy can be pulled as dependencies
git clone git://github.com/lvv/mplw.git
cd mplw.git
make install          # this will create 2 files: /etc/asciidoc/filters/mpl/{mpl.conf,mplw.py}
---------------------------------------------

Matplotlib version 0.98 or higher required.  It might work with 0.91 but you will need to set `lvv_style` to `False`.



How MPLW API differ from MPL
----------------------------
MPL was somewhat simplified for use as AsciiDoc filter.

* Python inline code evaluated in environment with following modules imported without namespace:
-------------------------------
from matplotlib.pyplot import *                                                                                                          
from numpy import *                                                                                                          
-------------------------------

* If there is inline plot data, MPLW fills in 'c' matrix.  If entry looks like number it is converted to float. 
* After MPL inline code evaluated,  mplw.py writes chart PNG file. You must not 
  call MPL's show() function.
* If lvv_style is enabled (currently forced) MPLW will:
	- adjust figure borders sizes to accommodate tick text and x/ylabel text.
	  MPL does not do it automatically, it only have correct frame size if image have default size.
	- enable grid.
	- set figure frame background to light grey and darker grey for frame
	  border. Note: there is bug in MPL, borders drawn not on all sides.
* There is also plotting function 'benchmark' based on 'barh'.  It should probably be
  in MPL code, not in MPLW. I will send patch to MPL project.
  See http://volnitsky.com/project/lvvlib/array[example usage of benchmark]


About
-----
MPLW is based on GNU licensed graphviz2png.py by Gouichi Iisaka. 
MPLW is currently in alpha state, API not yet stable. 


Todo
----
* Code cleanup and make tabs size consistent in mplw.py source
* Testing was done only with xhtml11 backend
* For inline-data add optional column header line,  which can be used for plot legend
* When mplw.py used not as asciidoc filter (but as utility generating PNGs from text files):
  - if title not set take file name as title
  - if multiple input files specified: make one overlay-ed chart
* Styles selection (now it forces lvv_style)
* PNG size should be specified in filter parameters and passed to MPLW (I don't know how to do this)
* PNG should be centered be default or at least filter should accept param `align=center` (don't know how to do this)
* SVG? (MPL can generate SVG)
* DITAA? Http://ditaa.sourceforge.net[DIagrams Through Ascii Art],
  Http://blog.m3r.nl/personal/full-text-based-document-generation-using-asciidoc[Full text-based document generation using asciidoc and ditaa]


.References
- [[[1]]]   http://www.methods.co.nz/asciidoc/asciidoc-graphviz-sample.html[Graphviz filter for AsciiDoc]
- [[[2]]]   http://matplotlib.sourceforge.net[MatPlotLib - python plotting library]
- [[[3]]]   http://code.google.com/p/scitools/wiki/EasyvizDocumentation[Easyviz - Python library for scientific computing]
- [[[4]]]   http://detexify.kirelabs.org/classify.html[drawing to  LaTeX symbol]

// vim:ts=8 ft=asciidoc:
